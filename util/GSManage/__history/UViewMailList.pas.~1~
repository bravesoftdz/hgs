unit UViewMailList;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, System.Actions, Vcl.ActnList,
  Vcl.XPStyleActnCtrls, Vcl.ActnMan, Vcl.ComCtrls, Vcl.Buttons, PngBitBtn,
  Vcl.StdCtrls, Vcl.ToolWin, Vcl.ActnCtrls, Vcl.ExtCtrls, NxColumnClasses,
  NxColumns, NxScrollControl, NxCustomGridControl, NxCustomGrid, NxGrid,
  AdvOfficeTabSet,
  Cromis.Comm.Custom, Cromis.Comm.IPC, Cromis.Threading, Cromis.AnyValue,
  CommonData, DragDrop, DropTarget, UElecDataRecord, SynCommons, mORMot,
  Vcl.Menus, FrmEditEmailInfo;

type
  TViewMailListF = class(TForm)
    mailPanel1: TPanel;
    tabMail: TTabControl;
    MailToolBar: TActionToolBar;
    StatusBar: TStatusBar;
    panMailButtons: TPanel;
    btnStartProgram: TBitBtn;
    btnCheckAll: TPngBitBtn;
    btnToTray: TPngBitBtn;
    panProgress: TPanel;
    btnStop: TSpeedButton;
    Progress: TProgressBar;
    ActionManager: TActionManager;
    actPreview: TAction;
    actDelete: TAction;
    actNewMail: TAction;
    actReply: TAction;
    actCheck: TAction;
    actNoSort: TAction;
    actShowMessages: TAction;
    actCheckAll: TAction;
    actStartProgram: TAction;
    actAutoCheck: TAction;
    actOptions: TAction;
    actRules: TAction;
    actAbout: TAction;
    actHelp: TAction;
    actQuit: TAction;
    actToTray: TAction;
    actCustomize: TAction;
    actHideViewed: TAction;
    actAddWhiteList: TAction;
    actAddBlackList: TAction;
    actRuleFromDelete: TAction;
    actRuleFromSpam: TAction;
    actRuleSubjectDelete: TAction;
    actRuleSubjectSpam: TAction;
    actMarkViewed: TAction;
    actMarkSpam: TAction;
    actDeleteSpam: TAction;
    actUnmarkSpam: TAction;
    actSelectSpam: TAction;
    actSuspendSound: TAction;
    actSpam: TAction;
    actStopChecking: TAction;
    actUndelete: TAction;
    actOpenMessage: TAction;
    actSelectAll: TAction;
    actReplyAll: TAction;
    actArchive: TAction;
    actStar: TAction;
    actUnstar: TAction;
    actMarkAsRead: TAction;
    actMarkAsUnread: TAction;
    actMark: TAction;
    actAddGmailLabel: TAction;
    actRemoveGmailLabel: TAction;
    actMore: TAction;
    AdvOfficeTabSet1: TAdvOfficeTabSet;
    grid_Mail: TNextGrid;
    NxIncrementColumn1: TNxIncrementColumn;
    Subject: TNxTextColumn;
    Status: TNxTextColumn;
    RecvDate: TNxDateColumn;
    Sender: TNxMemoColumn;
    Receiver: TNxMemoColumn;
    CC: TNxMemoColumn;
    BCC: TNxMemoColumn;
    EMailId: TNxTextColumn;
    EntryId: TNxTextColumn;
    StoreId: TNxTextColumn;
    DropEmptyTarget1: TDropEmptyTarget;
    DataFormatAdapterOutlook: TDataFormatAdapter;
    PopupMenu1: TPopupMenu;
    DeleteMail1: TMenuItem;
    BitBtn1: TBitBtn;
    EditMailInfo1: TMenuItem;
    procedure grid_MailCellDblClick(Sender: TObject; ACol, ARow: Integer);
    procedure DropEmptyTarget1Drop(Sender: TObject; ShiftState: TShiftState;
      APoint: TPoint; var Effect: Integer);
    procedure DeleteMail1Click(Sender: TObject);
    procedure EditMailInfo1Click(Sender: TObject);
  private
    procedure DeleteMail(ARow: integer);
    function GetEmailIDFromGrid(ARow: integer): TID;
  public
    FTask: TSQLGSTask;

    procedure SendCmd2IPC4ViewEmail(ARow: integer);
    procedure SendReqOLEmailInfo2;
    procedure ShowEmailListFromIDs(AIDs: TIDDynArray);
  end;

var
  ViewMailListF: TViewMailListF;

implementation

{$R *.dfm}

{ TViewMailListF }

procedure TViewMailListF.DeleteMail(ARow: integer);
var
  LEmailID: integer;
begin
  LEmailID := GetEmailIDFromGrid(ARow);

  if LEmailID > -1 then
  begin
    FTask.EmailMsg.ManyDelete(g_ProjectDB, FTask.ID, LEmailID);
    g_ProjectDB.Delete(TSQLEmailMsg, LEmailID);
  end;
end;

procedure TViewMailListF.DeleteMail1Click(Sender: TObject);
var
  LIds: TIDDynArray;
begin
  DeleteMail(grid_Mail.SelectedRow);
  FTask.EmailMsg.DestGet(g_ProjectDB, FTask.ID, LIds);
  ShowEmailListFromIDs(LIds);
end;

procedure TViewMailListF.DropEmptyTarget1Drop(Sender: TObject;
  ShiftState: TShiftState; APoint: TPoint; var Effect: Integer);
begin
  if (DataFormatAdapterOutlook.DataFormat <> nil) then
  begin
    SendReqOLEmailInfo2;
//    ShowMessage('Outlook Mail Dropped');
  end;
end;

procedure TViewMailListF.EditMailInfo1Click(Sender: TObject);
var
  LEmailInfoF: TEmailInfoF;
begin
  LEmailInfoF := TEmailInfoF.Create(nil);
  try
    if LEmailInfoF.ShowModal = mrOK then
    begin

    end;
  finally
    LEmailInfoF.Free;
  end;
end;

function TViewMailListF.GetEmailIDFromGrid(ARow: integer): TID;
begin
  if ARow <> -1 then
  begin
    Result := grid_Mail.CellByName['EMailId', ARow].AsInteger
  end
  else
    Result := -1;
end;

procedure TViewMailListF.grid_MailCellDblClick(Sender: TObject; ACol,
  ARow: Integer);
begin
  if ARow = -1 then
    exit;

  SendCmd2IPC4ViewEmail(ARow);
end;

procedure TViewMailListF.SendCmd2IPC4ViewEmail(ARow: integer);
var
  IPCClient: TIPCClient;
  Request: IIPCData;
  Result: IIPCData;
  LStrList: TStringList;
  LEntryId, LStoreId: string;
begin
  LStrList := TStringList.Create;
  IPCClient := TIPCClient.Create;
  try
    IPCClient.ServerName := IPC_SERVER_NAME_4_OUTLOOK;
    LStrList.Add('ServerName='+IPC_SERVER_NAME_4_OUTLOOK);
    LStrList.Add('Command='+CMD_REQ_MAIL_VIEW);
    LEntryId := grid_Mail.CellByName['EntryId', ARow].AsString;
    LStoreId := grid_Mail.CellByName['StoreId', ARow].AsString;
    LStrList.Add('EntryId='+LEntryId);
    LStrList.Add('StoreId='+LStoreId);

    Request := AcquireIPCData;
    Request.ID := DateTimeToStr(Now);
    Request.Data.WriteUTF8String(CMD_LIST,LStrList.Text);
    Result := IPCClient.ExecuteRequest(Request);

    if IPCClient.AnswerValid then
    begin
//      ShowMessage(LEntryId + '=' + LStoreId);
//      ShowMessage('IPCClient.AnswerValid');
    end;
  finally
    IPCClient.Free;
    LStrList.Free;
  end;
end;

procedure TViewMailListF.SendReqOLEmailInfo2;
var
  IPCClient: TIPCClient;
  LStrList: TStringList;
  Request: IIPCData;
  Result: IIPCData;
  Command: AnsiString;
  LEmailMsg,
  LEmailMsg2: TSQLEmailMsg;
  LTask: TSQLGSTask;
  LIds: TIDDynArray;
begin
  IPCClient := TIPCClient.Create;
  LStrList := TStringList.Create;
  LEmailMsg := TSQLEmailMsg.Create;
  try
    IPCClient.ServerName := IPC_SERVER_NAME_4_OUTLOOK2;
    IPCClient.ConnectClient(cDefaultTimeout);
    LStrList.Add('ServerName='+IPC_SERVER_NAME_4_OUTLOOK2);
    LStrList.Add('Command='+CMD_REQ_MAILINFO_SEND2);

    Request := AcquireIPCData;
    Request.ID := DateTimeToStr(Now);
    Request.Data.WriteUTF8String(CMD_LIST,LStrList.Text);
    Result := IPCClient.ExecuteConnectedRequest(Request);
//    Result := IPCClient.ExecuteRequest(Request);

    if IPCClient.AnswerValid then
    begin
      LStrList.Clear;
      LStrList.Text := Result.Data.ReadUTF8String(CMD_LIST);
      Command := LStrList.Values['Command'];
//      ShowMessage(IntToStr(Result.Data.ReadInteger('Integer')));
//      ShowMessage(Command);
      if Command = CMD_SEND_MAIL_ENTRYID then
      begin
//      ShowMessage(LStrList.Text);
        LEmailMsg.EntryID := LStrList.Values['EntryId'];
        LEmailMsg.StoreID := LStrList.Values['StoreId'];

        if (LEmailMsg.EntryID <> '') and (LEmailMsg.StoreID <> '') then
        begin
          LEmailMsg2 := TSQLEmailMsg.Create(g_ProjectDB,
            'EntryID = ? AND StoreID = ?', [LEmailMsg.EntryID,LEmailMsg.StoreID]);

          try
            //데이터가 없으면
            if LEmailMsg.ID = 0 then
            begin
              LEmailMsg2.EntryID := LStrList.Values['EntryId'];
              LEmailMsg2.StoreID := LStrList.Values['StoreId'];
              LEmailMsg2.Sender := LStrList.Values['Sender'];;
              LEmailMsg2.Receiver := LStrList.Values['Receiver'];;
              LEmailMsg2.CarbonCopy := LStrList.Values['CC'];;
              LEmailMsg2.BlindCC := LStrList.Values['BCC'];;
              LEmailMsg2.Subject := LStrList.Values['Subject'];;
              LEmailMsg2.RecvDate := TimeLogFromDateTime(StrToDateTime(LStrList.Values['RecvDate']));

              g_ProjectDB.Add(LEmailMsg2, true);
              FTask.EmailMsg.ManyAdd(g_ProjectDB, FTask.ID, LEMailMsg2.ID, True);

              FTask.EmailMsg.DestGet(g_ProjectDB, FTask.ID, LIds);
              ShowEmailListFromIDs(LIds);
            end;
          finally
            FreeAndNil(LEmailMsg2);
          end;
        end;
      end;
    end;
  finally
    FreeAndNil(LEmailMsg);
    LStrList.Free;
    IPCClient.DisconnectClient;
    IPCClient.Free;
  end;
end;

procedure TViewMailListF.ShowEmailListFromIDs(AIDs: TIDDynArray);
var
 LSQLEmailMsg: TSQLEmailMsg;
 LRow: integer;
begin
  LSQLEmailMsg:= TSQLEmailMsg.CreateAndFillPrepare(g_ProjectDB, TInt64DynArray(AIDs));
  grid_Mail.BeginUpdate;
  try
    with grid_Mail do
    begin
      ClearRows;

      while LSQLEmailMsg.FillOne do
      begin
        LRow := AddRow;
        CellByName['Subject', LRow].AsString := LSQLEmailMsg.Subject;
        CellByName['RecvDate', LRow].AsDateTime := TimeLogToDateTime(LSQLEmailMsg.RecvDate);
        CellByName['Sender', LRow].AsString := LSQLEmailMsg.Sender;
        CellByName['Receiver', LRow].AsString := LSQLEmailMsg.Receiver;
        CellByName['CC', LRow].AsString := LSQLEmailMsg.CarbonCopy;
        CellByName['BCC', LRow].AsString := LSQLEmailMsg.BlindCC;
        CellByName['EMailId', LRow].AsString := IntToStr(LSQLEmailMsg.ID);
        CellByName['EntryId', LRow].AsString := LSQLEmailMsg.EntryID;
        CellByName['StoreId', LRow].AsString := LSQLEmailMsg.StoreID;

        if LSQLEmailMsg.ParentID = '' then
        begin
          MoveRow(LRow, 0);
        end;
      end;
    end;
  finally
    grid_Mail.EndUpdate;
    FreeAndNil(LSQLEmailMsg);
  end;
end;

end.
