(***************************************************************

 * Converted with C to Pascal Converter 2.0
 * Release: 2.1.7.2015

 * Email: uralgunaydin@gmail.com
 * Updates: https://www.facebook.com/groups/375400985981109/files/
 * Blogs: https://www.facebook.com/groups/375400985981109/

 * Copyright (c) 2005, 2015 Ural Gunaydin (a.k.a. Al Gun)

***************************************************************)

unit cipmessagerouter_h;

//{$I AlGun.inc}

interface

(*
** 'C2PTypes.pas' declares external windows data types for the conversion purposes.
** It's created by the CtoPas converter and saved under
** "\Program Files\Common Files\AlGun Shared\CToPas 2.0\P_Files" folder.
** Consult the Windows and Delphi help files for more information about defined data types
*)

uses
	C2PTypes, Windows, Messages, SysUtils, Classes, ciptypes_h, typedefs_h;


(*******************************************************************************
 * Copyright (c) 2009, Rockwell Automation, Inc.
 * All rights reserved. 
 *
 ******************************************************************************)
{$HPPEMIT '#include 'typedefs.h''}
{$HPPEMIT '#include 'ciptypes.h''}

const CIP_MESSAGE_ROUTER_CLASS_CODE = $02;
{$EXTERNALSYM CIP_MESSAGE_ROUTER_CLASS_CODE}

(*! Structure for storing the Response generated by an explict message.
 * 
 *  This buffer will be used for storing the aResult. The response message will be generated
 *  by assembleLinearMsg. 
 *)
var gMRResponse: S_CIP_MR_Response;

(* public functions *)

(*!Initialize the data structures of the message router
 *)
function CIP_MessageRouter_Init(): EIP_STATUS;

(*! Free all data allocated by the classes created in the cip stack
 *)
procedure deleteAllClasses();

(*! Notify the MessageRouter that an explicit message (connected or unnconnected)
 *  has been recieved. This aFunction will be called from the encapsulation layer.
 *  The CPF strcuture is allready parsed an cann be accessed via the global variable: 
 *  g_stCPFDataItem.
 *  @param pa_pnData aPointer to the data buffer of the message directly at the beginning of the CIP part.
 *  @param pa_nDataLength number of bytes in the data buffer
 *  @Result:=  EIP_ERROR on fault
 *           EIP_OK on success           
 *)
function notifyMR(var pa_pnData: EIP_UINT8; pa_nDataLength: Integer): EIP_STATUS;

(*! Register a class at the message router.
 *  In order that the message router can deliver
 *  explicit messages each class has to register.
 *  Will be automaticall done when invoking create
 *  createCIPClass.
 *  @param pa_pt2Object cip class to be registered
 *  @Result:= EIP_OK on success
 *)
function registerClass(var pa_pt2Object: S_CIP_Class): EIP_STATUS;

implementation

end.
