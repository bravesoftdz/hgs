(***************************************************************

 * Converted with C to Pascal Converter 2.0
 * Release: 2.1.7.2015

 * Email: uralgunaydin@gmail.com
 * Updates: https://www.facebook.com/groups/375400985981109/files/
 * Blogs: https://www.facebook.com/groups/375400985981109/

 * Copyright (c) 2005, 2015 Ural Gunaydin (a.k.a. Al Gun)

***************************************************************)

unit cipcommon_h;

//{$I AlGun.inc}

interface

(*
** 'C2PTypes.pas' declares external windows data types for the conversion purposes.
** It's created by the CtoPas converter and saved under
** "\Program Files\Common Files\AlGun Shared\CToPas 2.0\P_Files" folder.
** Consult the Windows and Delphi help files for more information about defined data types
*)

uses
	C2PTypes, Windows, Messages, SysUtils, Classes, typedefs_h, ciptypes_h;


(*******************************************************************************
 * Copyright (c) 2009, Rockwell Automation, Inc.
 * All rights reserved. 
 *
 ******************************************************************************)
{$HPPEMIT '#include 'typedefs.h''}
{$HPPEMIT '#include 'ciptypes.h''}

(*! A buffer for holding the replay generated by explicit message requests 
 *  or producing I/O connections. These will use this buffer in the following
 *  ways:
 *    1. Explicit messages will use this buffer to store the data generated by the request
 *    2. I/O Connections will use this buffer for the produced data
 *)
var g_acMessageDataReplyBuffer: array of EIP_UINT8;

(** \brief  Check if requested service present in class/instance and call appropriate service.
 *
 * @param pt2Class class receiving the message
 * @param pa_MRRequest request message
 * @param pa_MRResponse reply message
 * @Result:=
 *     - EIP_OK_SEND    Args: array of const success = ;
{$EXTERNALSYM success}
 *     - EIP_OK  Args: array of const no = reply to send back;
{$EXTERNALSYM no}
 *     - EIP_ERROR Args: array of const error = ;
{$EXTERNALSYM error}
 *)
function notifyClass(var pt2Class: S_CIP_Class; var pa_MRRequest: S_CIP_MR_Request; var pa_MRResponse: S_CIP_MR_Response): EIP_STATUS;

(*! \brief generic implementation of the GetAttributeSingle CIP service
 *  Check from classID which Object requests an attribute, search if object has
 *  the appropriate attribute implemented.
 * @param pa_pstInstance aPointer to instance.
 * @param pa_pstMRRequest aPointer to request.
 * @param pa_pstMRResponse aPointer to response.
 * @Result:= status  >0 .. success
 *          -1 .. requested attribute not available
 *)
function getAttributeSingle(
	var pa_pstInstance: S_CIP_Instance; 
	var pa_pstMRRequest: S_CIP_MR_Request; var pa_pstMRResponse: S_CIP_MR_Response): EIP_STATUS;

(* \brief Generic implementation of the GetAttributeAll CIP service
 * Copy all attributes from Object into the global message buffer.
 * @param pa_pstObjectInstance aPointer to object instance with data.
 * @param pa_stMRRequest aPointer to MR request.
 * @param pa_stMRResponse aPointer for MR response.
 * @param pa_msg aPointer to global message buffer for response.
 * @Result:= length of data stream >0 .. success
 *              0 .. no reply to send
 *)
function getAttributeAll(
	var pa_pstObjectInstance: S_CIP_Instance; 
	var pa_stMRRequest: S_CIP_MR_Request; var pa_stMRResponse: S_CIP_MR_Response): EIP_STATUS;

function decodePaddedEPath(var pa_pstEPath: S_CIP_EPATH; var pa_pnData: EIP_UINT8): Integer;

implementation

end.
